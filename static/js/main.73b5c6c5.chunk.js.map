{"version":3,"sources":["../../src/Client.js","../../src/contexts/index.js","../../src/hooks/useLazyGet.js","../../src/hooks/useGet.js","../../src/hooks/usePost.js","../../src/hooks/useApiClient.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Client","this","options","mode","cache","redirect","referrerPolicy","get","path","query","json","url","fetch","headers","data","errors","e","post","body","stringifiedUrl","method","JSON","jsonResponse","res","status","statusText","ApiContext","React","ApiProvider","children","client","useState","value","setValue","PropTypes","isRequired","getOr","process","REACT_APP_API_URL","Authorization","REACT_APP_OUATH_TOKEN","Accept","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mfAEMA,aACJ,gBACEC,KAAA,UACAA,KAAA,QAAeC,EAAf,QACAD,KAAA,QAAe,CACbE,KADa,OAEbC,MAFa,WAGbC,SAHa,SAIbC,eAAgB,e,2BAIdC,gB,IACJC,SAAMC,UAAOC,S,IACZ,WACKC,EAAM,iBAAyB,CACnCA,IAAK,GAAG,EAAL,QADgC,EAEnCF,UAHD,uBAKiBG,MAAMD,EAAK,EAAN,GAClB,EADkB,SAErBE,QAAS,eAFO,MAGV,YACN,SACSb,eAAP,GAEF,OAPgB,OAST,kBAAQ,CAAEc,KAAM,CAAEC,OAAQ,CAACC,EAAD,eAEpC,S,6BAEKC,iB,IACJT,SAAMU,SAAMR,SAAMG,Y,IACjB,WACKM,EAAoB,EAAN,YAApB,EADC,uBAEiBP,MAAMO,EAAgB,EAAjB,GAClB,EADkB,SAErBN,QAAS,EAAF,GACF,EADE,UAFc,GAMrBO,OANqB,OAOrBF,KAAMG,qBAPU,MAQV,YACN,SACSrB,eAAP,GAEF,OAZgB,OAcT,kBAAQ,CAAEc,KAAM,CAAEC,OAAQ,CAACC,EAAD,eAEpC,S,6BAEYM,sBAAaC,G,IAAK,uBACVA,EADU,0BAE7B,MAAO,CACLC,OAAQD,EADH,OAELE,WAAYF,EAFP,WAGLT,WAEH,S,6BA7DGd,GCEA0B,EAAaC,kBAAnB,IAEaC,EAAc,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAAa,EACzBC,mBADyB,IAC5CC,EAD4C,KACrCC,EADqC,KAGnD,OACE,kBAACP,EAAD,UAAqBM,MAAO,CAAEA,MAAF,EAASC,SAAT,EAAmBH,WADjD,IAOFF,YAAwB,CAEtBC,SAAUK,QAFY,WAGtBJ,OAAQI,kBAA6BC,YCfrBC,gBAAM,GAAxB,UCAkBA,gBAAM,GAAxB,UCAkBA,gBAAM,GAAxB,UACmBA,gBAAM,GAAzB,WCFA,ICHe,MAA0B,iCCInCN,G,MAAS,IAAI9B,EAAOqC,oIAAYC,kBAAmB,CACvDzB,QAAS,iBAAO,CACd0B,cAAc,wBAAD,OAA0BF,oIAAYG,uBACnDC,OAAQ,iCACR,eAAgB,wBA2BLC,MAvBf,WACE,OACE,cAAC,EAAD,CAAaZ,OAAQA,EAArB,SACA,qBAAKa,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,iCCTOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73b5c6c5.chunk.js","sourcesContent":["import queryString from 'query-string';\n\nclass Client {\n  constructor(baseUrl, options) {\n    this.baseUrl = baseUrl;\n    this.headers = options.headers;\n    this.options = {\n      mode: 'cors',\n      cache: 'no-cache',\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n    };\n  }\n\n  async get({\n    path, query, json,\n  }) {\n    const url = queryString.stringifyUrl({\n      url: `${this.baseUrl}${path}`,\n      query,\n    });\n    const res = await fetch(url, {\n      ...this.options,\n      headers: this.headers(),\n    }).then((result) => {\n      if (json) {\n        return Client.jsonResponse(result);\n      }\n      return res;\n    })\n      .catch((e) => ({ data: { errors: [e.message] } }));\n    return res;\n  }\n\n  async post({\n    path, body, json, headers,\n  }) {\n    const stringifiedUrl = `${this.baseUrl}/${path}`;\n    const res = await fetch(stringifiedUrl, {\n      ...this.options,\n      headers: {\n        ...this.headers(),\n        ...headers,\n      },\n      method: 'POST',\n      body: JSON.stringify(body),\n    }).then((result) => {\n      if (json) {\n        return Client.jsonResponse(result);\n      }\n      return res;\n    })\n      .catch((e) => ({ data: { errors: [e.message] } }));\n    return res;\n  }\n\n  static async jsonResponse(res) {\n    const data = await res.json();\n    return {\n      status: res.status,\n      statusText: res.statusText,\n      data,\n    };\n  }\n}\n\nexport default Client;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Client from '../Client';\n\nconst ApiContext = React.createContext({});\n\nexport const ApiProvider = ({ children, client }) => {\n  const [value, setValue] = useState({});\n\n  return (\n    <ApiContext.Provider value={{ value, setValue, client }}>\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\nApiProvider.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.any.isRequired,\n  client: PropTypes.instanceOf(Client).isRequired,\n};\nexport default ApiContext;\n","import { getOr, merge } from 'lodash/fp';\nimport useApiClient from './useApiClient';\nimport useRequestHandler from './useRequestHandler';\n\nconst getParams = getOr({}, 'params');\n\nconst useLazyGet = (path, options = {}) => {\n  const { fetchClient } = useApiClient();\n  const {\n    loading, request, error, data,\n  } = useRequestHandler(path, 'GET', options);\n  useRequestHandler(options);\n\n  const fetchMore = (fetchOptions) => {\n    request(() => fetchClient.get({\n      path,\n      local: options.local,\n      query: {\n        ...getParams(merge(options, fetchOptions)),\n      },\n      json: true,\n    }));\n  };\n\n  return [\n    fetchMore, {\n      loading, data, error, fetchMore,\n    },\n  ];\n};\n\nexport default useLazyGet;\n","import { useEffect } from 'react';\nimport { getOr } from 'lodash/fp';\nimport useLazyGet from './useLazyGet';\n\nconst getParams = getOr({}, 'params');\n\nconst useGet = (path, options = {}) => {\n  const [fetch, {\n    fetchMore, loading, error, data,\n  }] = useLazyGet(path, {\n    ...options,\n    loading: true,\n  });\n\n  useEffect(() => {\n    fetch(options);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(getParams(options))]);\n\n  return {\n    loading,\n    data,\n    error,\n    fetchMore,\n  };\n};\n\nexport default useGet;\n","import { getOr, merge } from 'lodash/fp';\nimport useApiClient from './useApiClient';\nimport useRequestHandler from './useRequestHandler';\n\nconst getParams = getOr({}, 'params');\nconst getHeaders = getOr({}, 'headers');\n\nconst usePost = (path, options = {}) => {\n  const { fetchClient } = useApiClient();\n  const {\n    loading, request, error, data,\n  } = useRequestHandler(path, 'POST', options);\n\n  const post = (fetchOptions) => {\n    request(() => fetchClient.post({\n      local: options.local,\n      path,\n      headers: getHeaders(fetchOptions),\n      body: {\n        ...getParams(merge(options, fetchOptions)),\n      },\n      json: true,\n    }));\n  };\n\n  return [post, { loading, data, error }];\n};\n\nexport default usePost;\n","import { useContext } from 'react';\nimport ApiContext from '../contexts';\n\nconst useApiClient = () => {\n  const { value, setValue, client } = useContext(ApiContext);\n  const setData = (data) => {\n    setValue({\n      ...value,\n      ...data,\n    });\n  };\n\n  const cacheKey = (path, { params, method }) => JSON.stringify({\n    path,\n    params,\n    method,\n  });\n\n  const resetData = () => setValue({});\n\n  const writeData = (path, { params, data, method }) => {\n    const key = cacheKey(path, { params, method });\n    setData({ [key]: data });\n  };\n\n  return {\n    data: value,\n    cacheKey,\n    setData,\n    resetData,\n    writeData,\n    fetchClient: client,\n  };\n};\n\nexport default useApiClient;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { ApiProvider, Client } from 'rest-api-react-client';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst client = new Client(process.env.REACT_APP_API_URL, {\n  headers: () => ({\n    Authorization: `Authorization: token ${process.env.REACT_APP_OUATH_TOKEN}`,\n    Accept: 'application/vnd.github.v3+json',\n    'content-type': 'application/json',\n  }),\n});\n\nfunction App() {\n  return (\n    <ApiProvider client={client}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n    </ApiProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}